AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Innovator Island - Theme park backend
Globals:
  Function:
    Timeout: 5
Resources:
  InitStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://theme-park-sam-deploys-008744601422/943cba7121c3af742fbc37433df96587
      Handler: app.lambdaHandler
      MemorySize: 128
      Runtime: nodejs14.x
      Environment:
        Variables:
          DDB_TABLE_NAME:
            Ref: DynamoDBTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTable
      Events:
        InitStateAPI:
          Type: Api
          Properties:
            Path: /InitState
            Method: get
    Metadata:
      SamResourceId: InitStateFunction
  S3UploaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://theme-park-sam-deploys-008744601422/52e6f7e65824f5ee88d144841231190d
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs14.x
      Environment:
        Variables:
          UploadBucket:
            Ref: UploadBucket
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: UploadBucket
      Events:
        HttpPost:
          Type: Api
          Properties:
            Path: /Upload
            Method: get
    Metadata:
      SamResourceId: S3UploaderFunction
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: partitionKey
        AttributeType: S
      - AttributeName: sortKey
        AttributeType: S
      KeySchema:
      - AttributeName: partitionKey
        KeyType: HASH
      - AttributeName: sortKey
        KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    Metadata:
      SamResourceId: DynamoDBTable
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
    Metadata:
      SamResourceId: UploadBucket
  ProcessingBucket:
    Type: AWS::S3::Bucket
    Metadata:
      SamResourceId: ProcessingBucket
  FinalBucket:
    Type: AWS::S3::Bucket
    Metadata:
      SamResourceId: FinalBucket
  ThemeParkRealtime:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: theme-park-realtime
      AttributePayload:
        Attributes: {}
    Metadata:
      SamResourceId: ThemeParkRealtime
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ThemeParkUserPool
      MfaConfiguration: 'OFF'
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
    Metadata:
      SamResourceId: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ThemeParkUserPoolClient
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: UserPoolClient
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ThemeParkIdentityPool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
    Metadata:
      SamResourceId: IdentityPool
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-sync:*
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:cognito-sync:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :identitypool/
                - Ref: IdentityPool
          - Effect: Allow
            Action:
            - iot:Connect
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :client/theme*
          - Effect: Allow
            Action:
            - iot:Subscribe
            Resource: '*'
          - Effect: Allow
            Action:
            - iot:Receive
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :topic/*
    Metadata:
      SamResourceId: CognitoUnAuthorizedRole
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-sync:*
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:cognito-sync:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :identitypool/
                - Ref: IdentityPool
          - Effect: Allow
            Action:
            - iot:Connect
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :client/theme*
          - Effect: Allow
            Action:
            - iot:Subscribe
            Resource: '*'
          - Effect: Allow
            Action:
            - iot:Receive
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iot:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :topic/*
    Metadata:
      SamResourceId: CognitoAuthorizedRole
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
    Metadata:
      SamResourceId: IdentityPoolRoleMapping
  ThemeParkLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: ThemeParkAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - Fn::Sub: ${UploadBucket.Arn}/*
            - Fn::Sub: ${ProcessingBucket.Arn}/*
            - Fn::Sub: ${FinalBucket.Arn}/*
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - Fn::GetAtt:
              - DynamoDBTable
              - Arn
          - Effect: Allow
            Action:
            - iot:*
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - '*'
    Metadata:
      SamResourceId: ThemeParkLambdaRole
Outputs:
  InitStateApi:
    Description: API Gateway endpoint URL for Prod stage for Init State function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/InitState/
  UploadApi:
    Description: API Gateway endpoint URL for upload function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/Upload
  IdentityPoolId:
    Value:
      Ref: IdentityPool
    Export:
      Name: IdentityPool::Id
  IotEndpoint:
    Value:
      Ref: ThemeParkRealtime
  UploadBucketName:
    Value:
      Ref: UploadBucket
  ProcessingBucketName:
    Value:
      Ref: ProcessingBucket
  FinalBucketName:
    Value:
      Ref: FinalBucket
